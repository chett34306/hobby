import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;

import applesoranges.applesoranges;
import beautifultriplets.beautifultriplets;
import cupcake.cupcake;
import gradingstudents.gradingstudents;
import pageobjects.page;
import timeconversion.timeconversion;
import circulararrayrotation.circulararrayrotation;
import electronicsshop.*;

public class Test {
    public static void main(String[] args) {
        System.out.println("Hello, World!");

        List<Integer> keyboards = new ArrayList<>();
        keyboards.add(40);keyboards.add(50);keyboards.add(60);
        List<Integer> drives = new ArrayList<>();
        drives.add(5);drives.add(8);drives.add(12);
        electronicshop.electronicsshop(60, keyboards, drives);

        List<Integer> l1 = new ArrayList(); l1.add(3); l1.add(4);l1.add(5);
        Integer k = 2;
        List<Integer> queries = new ArrayList(); queries.add(1);queries.add(2);
        List<Integer> returnindicesvalues = circulararrayrotation.circulararrayrotationnumbers(l1, k, queries);

        int d = 3;
        int[] arr = { 1, 2, 4, 5, 7, 8, 10 };
        beautifultriplets.beautifultriplet(d, arr);

        applesoranges.countapplesoranges(7, 11, 5, 15, new int[] { -2, 2, 1 }, new int[] { 5, -6 });
        Integer[] grades = {73, 67, 38, 33};
        gradingstudents.gradingStudents(grades);
        String convertedTime = timeconversion.timeConversion("07:05:45PM");

        cupcake.calculatecalorie(new int[] { 5, 10, 7 });

        List<Integer> calories = new ArrayList<Integer>();
        calories.add(5);
        calories.add(10);
        calories.add(7);
        cupcake.calculatecalorie(calories);
        
        
        addtwonumbers(2, 3);
        int[] a = createrandomarray(100);
        printoccurences(a);
        sortarray(a);

        Node head = createlinklistwithrandomnumbers(10);
        lengthoflinkedlist(head);

        page pg = new page();
        pg.navigatetopage1("https://www.okta.com");

        
        
    }

//This code is all generated by github copilot


// add a method to add two numbers
public static void addtwonumbers(int a, int b) {
    int c = a + b;
    System.out.println(c);
}

public void difftwonumbers(int a, int b) {
    int c = a - b;
    System.out.println(c);
}

public void multiplytwonumbers(int a, int b) {
    int c = a * b;
    System.out.println(c);
}

public void dividtwonumbers(int a, int b) {
    int c = a / b;
    System.out.println(c);
}

public void findlargestnumber(int a, int b) {
    int c = a > b ? a : b;
    System.out.println(c);
}

public void findlargestnumberinarray(int[] a) {
    int c = a[0];
    for (int i = 0; i < a.length; i++) {
        if (a[i] > c) {
            c = a[i];
        }
    }
    System.out.println(c);
}

public static int[] createrandomarray(int n) {
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
        a[i] = (int) (Math.random() * 100);
        System.out.print(a[i] + " ,");
    }
    return a;
}

public static void sortarray(int[] a) {
    for (int i = 0; i < a.length; i++) {
        for (int j = i + 1; j < a.length; j++) {
            if (a[i] > a[j]) {
                int temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
    }
    System.out.println(a);
    for (int i = 0; i < a.length; i++) {
        System.out.print(a[i] + " ,");
    }
}

public void mergetwoarrays(int[] a, int[] b) {
    int[] c = new int[a.length + b.length];
    int i = 0;
    int j = 0;
    int k = 0;
    while (i < a.length && j < b.length) {
        if (a[i] < b[j]) {
            c[k] = a[i];
            i++;
        } else {
            c[k] = b[j];
            j++;
        }
        k++;
    }
    while (i < a.length) {
        c[k] = a[i];
        i++;
        k++;
    }
    while (j < b.length) {
        c[k] = b[j];
        j++;
        k++;
    }
    System.out.println(c);
}

public static Node createlinklistwithrandomnumbers(int n) {
    Node head = null;
    Node tail = null;
    System.out.println("Creating a link list with random numbers");
    for (int i = 0; i < n; i++) {
        Node node = new Node((int) (Math.random() * 100));
        if (head == null) {
            head = node;
        } else {
            tail.next = node;
        }
        tail = node;
    }
    Node temp = head;
    while (temp != null) {
        System.out.print(temp.data + " ,");
        temp = temp.next;
    }
    System.out.println("Finished creating a link list with random numbers");
    return head;
}

public static void lengthoflinkedlist(Node head) {
    int count = 0;
    System.out.println("Finding length of a link list");
    while (head != null) {
        count++;
        head = head.next;
    }
    System.out.println(count);
}

public void findloopinlinkedlist(Node head) {
    Node slow = head;
    Node fast = head;
    while (slow != null && fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;
        if (slow == fast) {
            System.out.println("Loop found");
            break;
        }
    }
    if (slow != fast) {
        System.out.println("Loop not found");
    }
}

//tictactoe game
public void tictactoe(int[][] a) {
    int count = 0;
    for (int i = 0; i < a.length; i++) {
        for (int j = 0; j < a[i].length; j++) {
            if (a[i][j] == 1) {
                count++;
            }
        }
    }
    if (count == 9) {
        System.out.println("Draw");
    } else if (count % 2 == 0) {
        System.out.println("Player 1 wins");
    } else {
        System.out.println("Player 2 wins");
    }
}

//find the odd ball in an array of integers and return the index    //O(n)
public void findoddball(int[] a) {
    int count = 0;
    for (int i = 0; i < a.length; i++) {
        if (a[i] % 2 == 1) {
            count++;
        }
    }
    if (count == 1) {
        for (int i = 0; i < a.length; i++) {
            if (a[i] % 2 == 1) {
                System.out.println(i);
            }
        }
    } else {
        System.out.println("No odd ball found");
    }
}


//print a tree
public void printtree(Node head) {
    if (head == null) {
        return;
    }
    System.out.println(head.data);
    printtree(head.left);
    printtree(head.right);
}

public void findstring(String a, String b) {
    int count = 0;
    for (int i = 0; i < a.length(); i++) {
        if (a.charAt(i) == b.charAt(0)) {
            int j = i;
            int k = 0;
            while (j < a.length() && k < b.length()) {
                if (a.charAt(j) == b.charAt(k)) {
                    k++;
                    j++;
                } else {
                    break;
                }
            }
            if (k == b.length()) {
                count++;
            }
        }
    }
    System.out.println(count);
}

public void istreebalancedornot(Node head) {
    int leftheight = height(head.left);
    int rightheight = height(head.right);
    if (Math.abs(leftheight - rightheight) > 1) {
        System.out.println("Not balanced");
    } else {
        System.out.println("Balanced");
    }
}

public int height(Node head) {
    if (head == null) {
        return 0;
    }
    int leftheight = height(head.left);
    int rightheight = height(head.right);
    return Math.max(leftheight, rightheight) + 1;
}

//read a file and parse for a letter R characters
public void readfile(String filename) {
    try {
        FileReader fr = new FileReader(filename);
        BufferedReader br = new BufferedReader(fr);
        String line = br.readLine();
        String[] charsR = new String[100];
        while (line != null) {
            System.out.println(line);
            line = br.readLine();
            charsR = parseforR(line, 'R');
        }
        br.close();
    } catch (Exception e) {
        System.out.println(e);
    }
}

public String[] parseforR(String line, char c) {
    String[] charsR = new String[100];
    int count = 0;
    for (int i = 0; i < line.length(); i++) {
        if (line.charAt(i) == c) {
            count++;
        }
    }
    charsR = new String[count];
    int j = 0;
    for (int i = 0; i < line.length(); i++) {
        if (line.charAt(i) == c) {
            charsR[j] = line.substring(i, i + 1);
            j++;
        }
    }
    return charsR;
}

//multiply two matrices
public void multiplymatrices(int[][] a, int[][] b) {
    int[][] c = new int[a.length][b[0].length];
    for (int i = 0; i < a.length; i++) {
        for (int j = 0; j < b[0].length; j++) {
            for (int k = 0; k < b.length; k++) {
                c[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    System.out.println(c);
}

//print the occurences of a numbers in a array
public static void printoccurences(int[] a) {
    int count = 0;
    Hashtable<Integer, Integer> int_count = new Hashtable<>();
    for (int i = 0; i < a.length; i++) {
        for (int j = 0; j < a.length; j++) {
            if (a[i] == a[j]) {
                count++;
                if(int_count.containsKey(a[i])){
                    int_count.put(a[i], int_count.get(a[i])+1);
                }else{
                    int_count.put(a[i], 1);
                }
        }
    }
        //System.out.println(a[i] + " occurs " + count + " times");
        count = 0;
    }
    System.out.println(" ");
    System.out.println("Occurences of each number in the array and sorted in ascending order");
    Collections.list(int_count.keys());

    //sort a hashtable
    TreeMap<Integer, Integer> tmap = new TreeMap<Integer, Integer>(int_count);
    //System.out.print(tmap);
    for (int i : tmap.keySet()) {
        System.out.println(i + " occurs " + tmap.get(i) + " times");
    }
    System.out.println("****************************************************************************************** ");
}

}
